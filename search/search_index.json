{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>desto lets you run and manage your bash and Python scripts in the background (inside <code>tmux</code> sessions) through a simple web dashboard. Launch scripts, monitor their and your system's status, view live logs, and control sessions\u2014all from your browser.  </p> <p> </p> <p>The key features are:  </p> <ul> <li>One-click session control: Launch, monitor, and stop <code>tmux</code> sessions from your browser.</li> <li>\ud83d\udc1a Bash &amp; \ud83d\udc0d Python support: Run both bash (<code>.sh</code>) and Python (<code>.py</code>) scripts seamlessly.</li> <li>Script management: Use your existing scripts, write new ones, edit, save, or delete them directly in the dashboard.</li> <li>Live log viewer: Watch script output in real time and view logs for each session.</li> <li>Live system stats: See real-time CPU, memory, and disk usage at a glance.</li> <li>Scheduling: Schedule scripts or script chains to launch at a specific date and time.</li> <li>Script chaining: Queue multiple scripts to run sequentially in a single session.</li> <li>Session history: Redis integration for persistent session tracking and history. See what is Redis \u2192</li> <li>Scheduled job control: Manage scheduled jobs with a dedicated table\u2014cancel any scheduled job with a click.</li> <li>Session &amp; log cleanup: Clear session history and delete logs for all or selected sessions.</li> <li>Notifications: Optional Pushbullet notifications for job/session finishes \u2014 set the <code>DESTO_PUSHBULLET_API_KEY</code> environment variable or add the key in Settings to receive desktop/mobile pushes when jobs complete.</li> <li>Persistent script &amp; log storage: Scripts and logs are saved in dedicated folders for easy access.</li> <li>\ud83d\udda5\ufe0f Command-line interface: Manage sessions, view logs, and control scripts from the terminal with our modern CLI. Learn more \u2192</li> </ul> <p>\ud83c\udfac Demo</p> <p></p>"},{"location":"#desto-overview","title":"\u2728 <code>desto</code> Overview","text":"\ud83d\udc40 Dashboard Overview \ud83d\ude80 Launch your scripts as `tmux` sessions  When you start `desto`, it creates `desto_scripts/` and `desto_logs/` folders in your current directory. Want to use your own locations? Just change these in the settings, or set the `DESTO_SCRIPTS_DIR` and `DESTO_LOGS_DIR` environment variables.  Your scripts show up automatically\u2014no setup needed. Both `.sh` (bash) and `.py` (Python) scripts are supported with automatic detection and appropriate execution. Ready to launch? Just:  1. Name your `tmux` session 2. Select one of your scripts 3. (OPTIONAL) edit and save your changes 4. Click \"Launch\"! \ud83c\udfac   \u270d\ufe0f Write new scripts and save them  If you want to compose a new script, you can do it right here, or simply just paste the output of your favorite LLM :) Choose between bash and Python templates with syntax highlighting and smart defaults.   \u2699\ufe0f Change settings  More settings to be added!    \ud83d\udcdc View your script's logs"},{"location":"#quick-start-with-docker","title":"\u26a1 Quick Start with Docker \ud83d\udc33","text":"<p>The fastest way to ship <code>desto</code> is by using Docker Compose \ud83d\udea2  </p> <p>You only need Docker and Docker Compose installed on your machine. If you don't have them yet, you can find installation instructions on the Docker website and Docker Compose documentation (or follow your favorite LLM's instructions \ud83d\ude09).  </p> <p>Start <code>desto</code> in just a few steps: </p> <ol> <li> <p>Clone the repository and go to it's main directory <pre><code>git clone https://github.com/kalfasyan/desto.git &amp;&amp; cd desto\n</code></pre></p> </li> <li> <p>Start the application with Docker Compose <pre><code>docker compose up -d\n</code></pre></p> </li> </ol> <p>\u2705 Done! \ud83c\udf89  </p> <p>You\u2019re all set\u2014your desto dashboard is now running at: \ud83c\udf10 http://localhost:8809</p> \ud83d\ude80 Essential Docker &amp; Docker Compose Commands <pre><code># Start the app in background (Docker Compose)\ndocker compose up -d\n</code></pre> <pre><code># View logs (Docker Compose)\ndocker compose logs -f\n</code></pre> <pre><code># Stop and remove services (Docker Compose)\ndocker compose down\n</code></pre> <pre><code># Rebuild and start (Docker Compose)\ndocker compose up -d --build\n</code></pre> <pre><code># Run the container directly (plain Docker)\ndocker run -d -p 8809:8809 \\\n  -v $PWD/desto_scripts:/app/desto_scripts \\\n  -v $PWD/desto_logs:/app/desto_logs \\\n  --name desto-dashboard \\\n  desto:latest\n</code></pre> <pre><code># View logs (plain Docker)\ndocker logs -f desto-dashboard\n</code></pre> <pre><code># Stop and remove the container (plain Docker)\ndocker stop desto-dashboard &amp;&amp; docker rm desto-dashboard\n</code></pre>"},{"location":"#cli-dashboard-installation-with-uv-or-pip","title":"\ud83d\udda5\ufe0f CLI &amp; \ud83d\udcca Dashboard Installation with <code>uv</code> or <code>pip</code>","text":"<p>If you are not familiar with <code>uv</code>, you may visit uv's official website for more information.</p> <p><code>uv</code> is a super-fast Python package manager and virtual environment tool, written in Rust. It helps you manage dependencies, create isolated environments, and install packages much faster than traditional tools like pip.  </p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.11+</li> <li>tmux</li> <li>at (for scheduling features)</li> </ul> <p>Check <code>pyproject.md</code></p>"},{"location":"#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Install <code>tmux</code> and <code>at</code> Instructions for different package managers     - **Debian/Ubuntu**        <pre><code>sudo apt install tmux at\n</code></pre>    - **Almalinux/Fedora**        <pre><code>sudo dnf install tmux at\n</code></pre>    - **Arch Linux**        <pre><code>sudo pacman -S tmux at\n</code></pre>     **Note:** The `at` package is required for scheduling features. If you don't plan to use script scheduling, you can skip installing `at`.     </p> </li> <li> <p>Install <code>desto</code> Installation Steps      - (Recommended) With [uv](https://github.com/astral-sh/uv), simply run:       <pre><code>uv add desto\n</code></pre>       This will install desto in your project \u2705         Or if you don't have a project yet, you can set up everything with [`uv`](https://docs.astral.sh/uv/getting-started/installation/):        1. [Install `uv`](https://docs.astral.sh/uv/getting-started/installation/) by following the instructions on the official site.       2. Create and set up your project:            <pre><code>mkdir myproject &amp;&amp; cd myproject\nuv init\nuv venv\nsource .venv/bin/activate\nuv add desto\n</code></pre>           Done!     - With pip:       <pre><code>pip install desto\n</code></pre> </p> </li> <li> <p>Run the Application <pre><code>desto\n</code></pre></p> </li> </ol> <p>\ud83c\udf89 Done! Open your browser and visit: http://localhost:8809 \ud83d\ude80</p>"},{"location":"#global-desto-installation-as-a-uv-tool-includes-cli","title":"Global <code>desto</code> Installation as a <code>uv</code> Tool (includes CLI)","text":"<pre><code># Install desto CLI globally\nuv tool install desto\n\n# Or install from source\ncd /path/to/desto\nuv tool install . --force\n</code></pre> <p>This installs two executables: - <code>desto</code> - Web dashboard - <code>desto-cli</code> - Command-line interface (work in progress)</p> Quick CLI Usage <p> </p> <pre><code># Check system status\ndesto-cli doctor\n</code></pre> <pre><code># List all sessions\ndesto-cli sessions list\n</code></pre> <pre><code># Start a new session\ndesto-cli sessions start \"my-task\" \"python my_script.py\"\n</code></pre> <pre><code># View session logs\ndesto-cli sessions logs \"my-task\"\n</code></pre> <pre><code># Kill a session\ndesto-cli sessions kill \"my-task\"\n</code></pre> <pre><code># List all scripts\ndesto-cli scripts list\n</code></pre> <pre><code># Create new script\ndesto-cli scripts create \"my_script\" --type python\n</code></pre> <pre><code># Edit script in $EDITOR\ndesto-cli scripts edit \"my_script\"\n</code></pre> <pre><code># Run script in tmux session\ndesto-cli scripts run \"my_script\"\n</code></pre> <pre><code># Run script directly\ndesto-cli scripts run \"my_script\" --direct\n</code></pre> <p>\ud83d\udcd6 Full CLI Documentation \u2192</p> <p>The CLI provides the same functionality as the web interface but optimized for terminal use, including rich formatting, real-time log viewing, and comprehensive session management.</p>"},{"location":"#license","title":"License","text":"<p>Shield: </p> <p>This work is licensed under a Creative Commons Attribution 4.0 International License.</p> <p></p>"},{"location":"#todo","title":"TODO","text":"<ul> <li>[ ] Explore possibility to pause processes running inside a session</li> <li>[ ] Add dark mode/theme toggle for the dashboard UI</li> </ul> <p>desto makes handling tmux sessions and running scripts approachable for everyone\u2014no terminal gymnastics required!</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at kalfasyan+conduct@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to desto","text":"<p>Thank you for your interest in contributing! This project values kind communication, understanding, and respect. Whether you're fixing bugs, improving documentation, or suggesting new features, your contributions are welcome.</p>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Open Communication: Please discuss any major changes or ideas in an issue before making a pull request. This helps ensure your work aligns with the project's goals.</li> <li>Respect: Be kind and constructive in all interactions.</li> <li>Transparency: Be clear about what your change does and why. Include context and reasoning in issues and pull requests.</li> </ul>"},{"location":"CONTRIBUTING/#submitting-issues","title":"Submitting Issues","text":"<ul> <li>Provide as much detail as possible (steps to reproduce, environment, etc.).</li> </ul>"},{"location":"CONTRIBUTING/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<ol> <li>Fork the repository and create your branch from <code>main</code>.</li> <li>Make your changes, following good code practices and adding tests if appropriate.</li> <li>Ensure your code passes linting and tests (<code>uv run --extra dev pytest tests/</code> and <code>uv run --extra dev ruff check .</code>).</li> <li>Open a pull request with a clear description of your changes.</li> </ol>"},{"location":"CONTRIBUTING/#style-docstrings","title":"Style &amp; Docstrings","text":"<p>We use ruff for formatting and linting and enforce Google-style docstrings (<code>D</code> rules via pydocstyle). Please:</p> <ul> <li>Keep line length within the configured limit (<code>line-length</code> in <code>pyproject.toml</code>).</li> <li>Write a concise summary line (imperative mood) followed by a blank line for multi-line docstrings.</li> <li>Include <code>Args:</code>, <code>Returns:</code>, <code>Raises:</code> where applicable.</li> <li>Avoid redundancy\u2014do not restate parameter types if already type-annotated unless clarification helps.</li> <li>Use triple double quotes for all docstrings.</li> </ul> <p>Minimal examples:</p> <pre><code>def add(a: int, b: int) -&gt; int:\n    \"\"\"Return the sum of two integers.\"\"\"\n\ndef fetch_item(key: str) -&gt; dict:\n    \"\"\"Fetch an item by key.\n\n    Args:\n        key: Cache or datastore lookup key.\n\n    Returns:\n        A dictionary representing the stored item.\n\n    Raises:\n        KeyError: If the key is not found.\n    \"\"\"\n</code></pre> <p>You can auto-fix many issues:</p> <pre><code>uv run --extra dev ruff check . --fix\nuv run --extra dev ruff format\n</code></pre> <p>Pre-commit will run these checks automatically (see <code>.pre-commit-config.yaml</code>).</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and inclusive. Disrespectful or inappropriate behavior will not be tolerated.</p>"},{"location":"SECURITY/","title":"Security Policy","text":""},{"location":"SECURITY/#supported-versions","title":"Supported Versions","text":"<p>I plan to release security updates for the latest stable version of <code>desto</code>. Please always use the latest version for the best security and support.</p> Version Supported latest :white_check_mark: &lt; latest :x:"},{"location":"SECURITY/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you discover a security vulnerability in this project, please do not create a public issue. Instead, report it privately by emailing:</p> <p>kalfasyan+security@gmail.com</p> <p>Please include as much detail as possible to help me quickly understand and address the issue. I will respond as soon as possible and coordinate a fix and disclosure process as appropriate.</p> <ul> <li>I appreciate responsible disclosure.</li> <li>After a fix is released, I will credit reporters (if desired) in the release notes.</li> </ul>"},{"location":"cli/","title":"Desto CLI","text":"<p>A command-line interface for managing tmux sessions with clean, modular architecture.</p>"},{"location":"cli/#architecture","title":"Architecture","text":"<p>The CLI is structured into the following modules:</p> <pre><code>src/desto/cli/\n\u251c\u2500\u2500 __init__.py          # Package initialization and exports\n\u251c\u2500\u2500 main.py              # Main CLI application with typer\n\u251c\u2500\u2500 sessions.py          # Session management commands\n\u251c\u2500\u2500 scripts.py           # Script management commands\n\u251c\u2500\u2500 session_manager.py   # Core session management logic (UI-independent)\n\u2514\u2500\u2500 utils.py             # Utility functions for formatting and logging\n</code></pre>"},{"location":"cli/#design-principles","title":"Design Principles","text":"<ol> <li>Modular Design: Each module has a single responsibility</li> <li>Clean Dependencies: Core session logic is independent of UI frameworks</li> <li>Error Handling: Comprehensive error handling with user-friendly messages</li> <li>Type Safety: Full type hints for better development experience</li> <li>Extensible: Easy to add new commands and functionality</li> </ol>"},{"location":"cli/#core-components","title":"Core Components","text":""},{"location":"cli/#clisessionmanager","title":"CLISessionManager","text":"<p>The heart of the CLI - manages tmux sessions without any UI dependencies:</p> <ul> <li>Session lifecycle: Start, stop, list, attach to sessions</li> <li>Log management: View and follow session logs</li> <li>Status tracking: Monitor session state and runtime</li> <li>Directory management: Handle scripts and logs directories</li> </ul>"},{"location":"cli/#commands-structure","title":"Commands Structure","text":"<pre><code># Session Management\ndesto-cli sessions list                    # List all sessions\ndesto-cli sessions start \"name\" \"command\"  # Start new session\ndesto-cli sessions kill \"name\"             # Kill specific session  \ndesto-cli sessions kill --all              # Kill all sessions\ndesto-cli sessions attach \"name\"           # Attach to session\ndesto-cli sessions logs \"name\"             # View session logs\ndesto-cli sessions status [name]           # Show session status\n\n# Script Management\ndesto-cli scripts list                     # List all scripts\ndesto-cli scripts list --details           # List with detailed info\ndesto-cli scripts create \"name\" --type bash|python  # Create new script\ndesto-cli scripts edit \"name\"              # Edit script in $EDITOR\ndesto-cli scripts show \"name\"              # Display script content\ndesto-cli scripts delete \"name\"            # Delete script\ndesto-cli scripts copy \"src\" \"dest\"        # Copy script\ndesto-cli scripts run \"name\" [args]        # Run script directly or in tmux\n</code></pre>"},{"location":"cli/#key-features","title":"Key Features","text":""},{"location":"cli/#session-management","title":"\ud83c\udfaf Session Management","text":"<ul> <li>Start sessions with custom commands</li> <li>List sessions with rich formatting</li> <li>Kill individual or all sessions</li> <li>Attach to running sessions</li> <li>Track session status (running/finished)</li> </ul>"},{"location":"cli/#script-management","title":"\ufffd Script Management","text":"<ul> <li>Create scripts with templates (bash/python)</li> <li>List scripts with icons and metadata</li> <li>Edit scripts in preferred editor ($EDITOR)</li> <li>Show script content with syntax highlighting</li> <li>Copy and delete scripts</li> <li>Run scripts directly or in tmux sessions</li> <li>Automatic executable permission handling</li> </ul>"},{"location":"cli/#rich-output","title":"\ufffd\ud83d\udcca Rich Output","text":"<ul> <li>Colorized terminal output using Rich</li> <li>Formatted tables for session listings</li> <li>Progress indicators and status icons</li> <li>Human-readable timestamps and durations</li> <li>Syntax highlighting for script content</li> </ul>"},{"location":"cli/#logging","title":"\ud83d\udcdd Logging","text":"<ul> <li>Automatic log file creation per session</li> <li>View last N lines or entire logs</li> <li>Follow logs in real-time (tail -f behavior)</li> <li>Configurable log directory</li> </ul>"},{"location":"cli/#configuration","title":"\u2699\ufe0f Configuration","text":"<ul> <li>Environment variable support (<code>DESTO_SCRIPTS_DIR</code>, <code>DESTO_LOGS_DIR</code>)</li> <li>Custom directory paths via command line options</li> <li>Verbose output modes</li> <li>System requirements checking</li> </ul>"},{"location":"cli/#future-enhancements","title":"Future Enhancements","text":"<p>The modular architecture makes it easy to add:</p> <ul> <li>~~Script management commands~~ \u2705 Implemented</li> <li>Chain/queue management for script sequences</li> <li>Scheduling functionality  </li> <li>Configuration management</li> <li>Advanced filtering and search</li> <li>Integration with other tools</li> </ul>"},{"location":"cli/#dependencies","title":"Dependencies","text":"<p>Core functionality requires only: - <code>loguru</code> - Logging - <code>psutil</code> - System information (if added)</p> <p>Optional rich CLI experience: - <code>typer</code> - CLI framework - <code>rich</code> - Terminal formatting</p> <p>The code is designed to gracefully handle missing optional dependencies.</p>"},{"location":"pyproject/","title":"Config","text":""},{"location":"pyproject/#project-configuration-pyprojecttoml","title":"Project configuration (<code>pyproject.toml</code>)","text":"<p>This project uses <code>pyproject.toml</code> for metadata and build configuration. Key sections:</p> <ul> <li>[project]: package metadata, dependencies, and scripts.</li> <li>[project.optional-dependencies]: extras groups, including <code>docs</code> which contains MkDocs and theme packages.</li> <li>[build-system]: <code>hatchling</code> is used as the build backend.</li> </ul> <p>See the repository root <code>pyproject.toml</code> for the full configuration.</p>"},{"location":"src/desto/cli/","title":"Index","text":"<pre><code># Desto CLI (packaged path copy)\n\nThis file is a copy of `src/desto/cli/README.md` to satisfy links from the main README when building the docs site.\n\nSee `docs/cli.md` for a docs-optimized version of the CLI guide.\n</code></pre>"}]}